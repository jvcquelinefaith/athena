{"version":3,"sources":["student.jpg","work.jpg","group-w.jpg","LandingItem.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LandingItem","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Row","id","Col","xs","md","Card","CardImg","top","height","src","require","CardBody","CardText","Button","color","Component","About","style","backgroundColor","opacity","dist_default","speed","Delay","ms","App","_this","state","isOpen","toggle","bind","assertThisInitialized","setState","Container","fluid","Navbar","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","src_About_0","src_LandingItem_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.398bc663.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/student.b04514fc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/work.931e1317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/group-w.91cc0d09.jpg\";","import React, { Component } from 'react';\nimport { Col, Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button, Row } from 'reactstrap';\nimport './LandingItem.css';\n\nclass LandingItem extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    return (\n      <Row id=\"landing-row\">\n        <Col xs=\"12\" md=\"4\">\n          <Card>\n            <CardImg top height=\"400vw\" src={require('./student.jpg')} />\n            <CardBody>\n              <CardText>I am in high school trying to decide what colleges and universities to apply to.</CardText>\n              <Button color=\"primary\"> I'M LOOKING FOR A SCHOOL </Button>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col xs=\"12\" md=\"4\">\n          <Card>\n            <CardImg top height=\"400vw\" src={require('./work.jpg')} />\n            <CardBody>\n              <CardText>I have been working and I am looking to make a change in my career.</CardText>\n              <Button color=\"primary\"> I'M LOOKING FOR A JOB </Button>\n            </CardBody>\n          </Card>\n        </Col>\n        <Col xs=\"12\" md=\"4\">\n          <Card>\n            <CardImg top height=\"400vw\" src={require('./group-w.jpg')} />\n            <CardBody>\n              <CardText>I am looking for a mentor or a supportive network of women in computing.</CardText>\n              <Button color=\"primary\">I'M LOOKING FOR SUPPORT </Button>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default LandingItem;\n","import React, { Component } from 'react';\nimport { Col, Card, CardText, CardBody,\n  CardTitle, Button, Row } from 'reactstrap';\n\nimport Typing from 'react-typing-animation';\nimport './About.css';\n\nclass About extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    return (\n      <Row>\n        <Col md=\"12\">\n          <Card id=\"landing-row\" style={{ backgroundColor: '#333', opacity: 0.8 }}>\n            <CardBody>\n              <CardText id=\"intro\">\n                <Typing speed={1}>\n                  <p>Hi there, I'm Athena!</p>\n                  <Typing.Delay ms={500} />\n                  <p>I'm glad to know you're interested in the field of computing.</p>\n                  <Typing.Delay ms={500} />\n                  <p>It is my duty to provide you with all the information you need to\n                  make the right career decisions!</p>\n                  <Typing.Delay ms={500} />\n                  <p>I provide information like how conducive the learning or\n                  working environments are, and the availability of mentorship\n                  and support organisations at these institutions!</p>\n                  <Typing.Delay ms={500} />\n                  <p>This is all to help you navigate the known obstacles in the computing\n                  industry, and ensure that you reach your maximum potential!</p>\n                  <Typing.Delay ms={500} />\n                  <p>Keep exploring the site to find out more!</p>\n                </Typing>\n              </CardText>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Collapse, Navbar, NavbarToggler,\n  NavbarBrand, Nav, NavLink, NavItem, UncontrolledDropdown,\n  DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nimport LandingItem from './LandingItem.js';\nimport About from './About.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  render() {\n    return (\n      <div id=\"App\">\n        <Container fluid>\n          <header>\n            <Navbar color=\"light\" light expand=\"md\">\n              <NavbarBrand href=\"/\"> athena </NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                  </NavItem>\n                  <NavLink>\n                    schools\n                  </NavLink>\n                  <NavLink>\n                    companies\n                  </NavLink>\n                  <NavLink>\n                    associations\n                  </NavLink>\n                  <NavLink>\n                    login\n                  </NavLink>\n                </Nav>\n              </Collapse>\n            </Navbar>\n          </header>\n          <About />\n          <LandingItem />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}