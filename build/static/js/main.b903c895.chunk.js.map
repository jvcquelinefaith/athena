{"version":3,"sources":["login_icon.svg","WIC.png","circle.png","Schools.js","Companies.js","Associations.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Schools","react_default","a","createElement","className","Component","Companies","Associations","NavBar","react_router_dom","to","src","require","react_router","path","component","App","src_NavBar_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mLCWzBC,gMANX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,YAHgBC,cCKPC,2LANSD,aCMTE,2LANYF,aC8BZG,mLAtBX,OACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,KAAIT,EAAAC,EAAAC,cAAA,qBAEfF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,YAAT,IAAqBT,EAAAC,EAAAC,cAAA,oBAArB,KACAF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,cAAT,IAAuBT,EAAAC,EAAAC,cAAA,sBAAvB,KACAF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,iBAAT,IAA0BT,EAAAC,EAAAC,cAAA,yBAA1B,KACAF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,GAAG,UAAT,IAAmBT,EAAAC,EAAAC,cAAA,kBAAnB,IAAgCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYO,IAAKC,EAAQ,MAAxE,MAEAX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,MACZb,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWf,IAClCC,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWT,IACpCL,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWR,aAjB9BF,aCUNW,mLAZX,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeO,IAAKC,EAAQ,MAC3CX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaO,IAAKC,EAAQ,eAPjCP,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b903c895.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login_icon.3d4d4377.svg\";","module.exports = __webpack_public_path__ + \"static/media/WIC.bcb2b2e0.png\";","module.exports = __webpack_public_path__ + \"static/media/circle.bfb988a1.png\";","import React, { Component } from 'react';\nimport './Schools.css';\n\nclass Schools extends Component {\n  render() {\n    return (\n      <div className=\"Schools\"> </div>\n    )\n  }\n}\n\nexport default Schools;\n","import React, { Component } from 'react';\n\nclass Companies extends Component {\n  render() {\n    return \n  }\n}\n\nexport default Companies;\n","import React, { Component } from 'react';\n\nclass Associations extends Component {\n  render() {\n    return \n  }\n}\n\nexport default Associations;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport './NavBar.css';\nimport Schools from './Schools.js';\nimport Companies from './Companies.js';\nimport Associations from './Associations.js';\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"Navbar\">\n          <span className=\"home\">\n            <Link to=\"/\"><p>athena</p></Link>\n          </span>\n          <span className=\"tabs\">\n            <Link to=\"/schools\"> <p>schools</p> </Link>\n            <Link to=\"/companies\"> <p>companies</p> </Link>\n            <Link to=\"/associations\"> <p>associations</p> </Link>\n            <Link to=\"/login\"> <p>login</p> <img className=\"loginIcon\" src={require('./login_icon.svg')} /> </Link>\n          </span>\n            <Route path=\"/\" />\n            <Route path=\"/schools\" component={Schools} />\n            <Route path=\"/companies\" component={Companies} />\n            <Route path=\"/associations\" component={Associations} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './NavBar.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"App-header\">\n          <img className=\"backgoundImg\" src={require('./WIC.png')}/>\n          <img className=\"sideCircle\" src={require('./circle.png')}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}